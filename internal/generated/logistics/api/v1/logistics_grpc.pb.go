// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/logistics.proto

package logistics_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogisticsEngineAPI_MoveUnit_FullMethodName             = "/logistics.api.v1.LogisticsEngineAPI/MoveUnit"
	LogisticsEngineAPI_UnitReachedWarehouse_FullMethodName = "/logistics.api.v1.LogisticsEngineAPI/UnitReachedWarehouse"
	LogisticsEngineAPI_MetricsReport_FullMethodName        = "/logistics.api.v1.LogisticsEngineAPI/MetricsReport"
)

// LogisticsEngineAPIClient is the client API for LogisticsEngineAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticsEngineAPIClient interface {
	// MoveUnit request will be send when unit moves in dimensions to new location.
	MoveUnit(ctx context.Context, in *MoveUnitRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// UnitReachedWarehouse reports when unit reached warehouse to do something there.
	UnitReachedWarehouse(ctx context.Context, in *UnitReachedWarehouseRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// MetricsReport reports when .
	MetricsReport(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*MetricsReportResponse, error)
}

type logisticsEngineAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsEngineAPIClient(cc grpc.ClientConnInterface) LogisticsEngineAPIClient {
	return &logisticsEngineAPIClient{cc}
}

func (c *logisticsEngineAPIClient) MoveUnit(ctx context.Context, in *MoveUnitRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, LogisticsEngineAPI_MoveUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsEngineAPIClient) UnitReachedWarehouse(ctx context.Context, in *UnitReachedWarehouseRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, LogisticsEngineAPI_UnitReachedWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsEngineAPIClient) MetricsReport(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*MetricsReportResponse, error) {
	out := new(MetricsReportResponse)
	err := c.cc.Invoke(ctx, LogisticsEngineAPI_MetricsReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsEngineAPIServer is the server API for LogisticsEngineAPI service.
// All implementations should embed UnimplementedLogisticsEngineAPIServer
// for forward compatibility
type LogisticsEngineAPIServer interface {
	// MoveUnit request will be send when unit moves in dimensions to new location.
	MoveUnit(context.Context, *MoveUnitRequest) (*DefaultResponse, error)
	// UnitReachedWarehouse reports when unit reached warehouse to do something there.
	UnitReachedWarehouse(context.Context, *UnitReachedWarehouseRequest) (*DefaultResponse, error)
	// MetricsReport reports when .
	MetricsReport(context.Context, *DefaultRequest) (*MetricsReportResponse, error)
}

// UnimplementedLogisticsEngineAPIServer should be embedded to have forward compatible implementations.
type UnimplementedLogisticsEngineAPIServer struct {
}

func (UnimplementedLogisticsEngineAPIServer) MoveUnit(context.Context, *MoveUnitRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUnit not implemented")
}
func (UnimplementedLogisticsEngineAPIServer) UnitReachedWarehouse(context.Context, *UnitReachedWarehouseRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitReachedWarehouse not implemented")
}
func (UnimplementedLogisticsEngineAPIServer) MetricsReport(context.Context, *DefaultRequest) (*MetricsReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsReport not implemented")
}

// UnsafeLogisticsEngineAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsEngineAPIServer will
// result in compilation errors.
type UnsafeLogisticsEngineAPIServer interface {
	mustEmbedUnimplementedLogisticsEngineAPIServer()
}

func RegisterLogisticsEngineAPIServer(s grpc.ServiceRegistrar, srv LogisticsEngineAPIServer) {
	s.RegisterService(&LogisticsEngineAPI_ServiceDesc, srv)
}

func _LogisticsEngineAPI_MoveUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsEngineAPIServer).MoveUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsEngineAPI_MoveUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsEngineAPIServer).MoveUnit(ctx, req.(*MoveUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsEngineAPI_UnitReachedWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitReachedWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsEngineAPIServer).UnitReachedWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsEngineAPI_UnitReachedWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsEngineAPIServer).UnitReachedWarehouse(ctx, req.(*UnitReachedWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsEngineAPI_MetricsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsEngineAPIServer).MetricsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsEngineAPI_MetricsReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsEngineAPIServer).MetricsReport(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticsEngineAPI_ServiceDesc is the grpc.ServiceDesc for LogisticsEngineAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticsEngineAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.api.v1.LogisticsEngineAPI",
	HandlerType: (*LogisticsEngineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveUnit",
			Handler:    _LogisticsEngineAPI_MoveUnit_Handler,
		},
		{
			MethodName: "UnitReachedWarehouse",
			Handler:    _LogisticsEngineAPI_UnitReachedWarehouse_Handler,
		},
		{
			MethodName: "MetricsReport",
			Handler:    _LogisticsEngineAPI_MetricsReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/logistics.proto",
}
